knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
## I think this is because if we want to use *GitHub*, we need to upload the changed code to the cloud before it can be seen in *GitHub* history. So if we forget to upload changes, we won't be able to save our changes on GitHub.
# ## I think this is because if we want to use *GitHub*, we need to upload the changed code to the cloud before it can be seen in *GitHub* history. So if we forget to upload changes, we won't be able to save our changes on GitHub.
path <- "replace this text with your relative path to a file in the 'data/' folder"
data <- read_csv(path)
path <- "./workshop_9.2/Workshop9.2/data"
data <- read_csv(path)
path <- "D:/Data science for biologists/workshop_9.2/Workshop9.2/data"
data <- read_csv(path)
path <- "./data"
data <- read_csv(path)
path <- "./data/OA_activitydat_20190302_BIOL3207"
data <- read_csv(path)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "./output/data"
write_csv(data, file = path)
path <- "./output/data/Change"
write_csv(data, file = path)
View(data)
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
OA <- OA_activitydat_20190302_BIOL3207.csv
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
path_1 %>% filter(!(is.na(path)))
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
path %>% filter(!(is.na(path)))
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
OA_activitydat_20190302_BIOL3207.csv %>% filter(!(is.na()))
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data %>% filter(!(is.na(activity)))
help(flextable)
help(keep)
# Drop irrelevant columns
select("species","treatment","animal_id","activity")
# Drop irrelevant columns
select.list("species","treatment","animal_id","activity")
# Drop irrelevant columns
data %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
help(flextable)
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
## I think this is because if we want to use *GitHub*, we need to upload the changed code to the cloud before it can be seen in *GitHub* history. So if we forget to upload changes, we won't be able to save our changes on GitHub.
# ## I think this is because if we want to use *GitHub*, we need to upload the changed code to the cloud before it can be seen in *GitHub* history. So if we forget to upload changes, we won't be able to save our changes on GitHub.
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
knitr::opts_chunk$set(echo = TRUE)
options(digits=2)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read.csv(path)
path <- "./output/data/Change"
write_csv(data, file = path)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "./output/data/Change"
write_csv(data, file = path)
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
# Install a load of packages that we'll use. I'll show you a shortcut that I love to use. Try using the p_load function in the "pacman" package. p_load will execute both the install.packages and library commands in one shot so they only need to be used once to install pacman itself.
install.packages("pacman", repos = "http://cran.us.r-project.org")
library(pacman)
# Install bookdown for rendering because we'll need this. While we're at it, lets also install /load the tidyverse
p_load(bookdown, tidyverse, ggforce, flextable, latex2exp, png, magick) # basically just list all the packages you want here
path <- "./data/OA_activitydat_20190302_BIOL3207.csv"
data <- read_csv(path)
path <- "./output/data/Change"
write_csv(data, file = path)
# Drop irrelevant columns
data %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
## Write your answer here....remember to use '#" in front of your text.
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data = permuted_penguins, mapping = aes(x = data$treatment, y = data$activity, colour=data$species))
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data = data, mapping = aes(x = data$treatment, y = data$activity, colour=data$species))
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data, mapping = aes(x = data$treatment, y = data$activity, colour=data$species))
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data, mapping = aes(x = data$treatment, y = data$activity, colour=data$species)) +
geom_point()
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data, mapping = aes(x = data$treatment, y = data$activity, colour=data$species)) +
geom_boxplot()
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data, mapping = aes(x = data$treatment, y = data$activity, colour=data$species)) + geom_boxplot()
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data, mapping = aes(x = treatment, y = activity, colour= species)) + geom_boxplot()
help(ggsave)
# Drop irrelevant columns
data %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
attach(data)
data$mean <- mean(activity)
# Drop irrelevant columns
data %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
attach(data)
data$mean <- mean(activity)
data
# Drop irrelevant columns
data %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
attach(data)
data$mean <- mean(activity)
data$mean
# Drop irrelevant columns
data %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
# Use flextable to render the summary table in a tidy format
species_mean <- mean(activit)
# Use flextable to render the summary table in a tidy format
species_mean <- mean(activity)
species_mean
# Drop irrelevant columns
data %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
species_mean <- mean(data$activity)
species_mean
# Use flextable to render the summary table in a tidy format
df <- df %>%
group_by(data) %>%
summarise(val=mean(activity,na.rm=TURE))
# Use flextable to render the summary table in a tidy format
df <- df %>%
group_by() %>%
summarise(val=mean(activity,na.rm=TURE))
# Use flextable to render the summary table in a tidy format
df <- df %>%
group_by(species) %>%
summarise(val=mean(activity,na.rm=TURE))
# Use flextable to render the summary table in a tidy format
df <- df %>%
group_by(species_mean) %>%
summarise(val=mean(activity,na.rm=TURE))
help("group_by")
# Use flextable to render the summary table in a tidy format
data%>%group_by(species) %>%
summarise(m=mean(activity)))
# Use flextable to render the summary table in a tidy format
data%>%group_by(species)%>%summarise(m=mean(activity)))
# Use flextable to render the summary table in a tidy format
data%>%group_by(species)%>%summarise(m=mean(activity))
# Drop irrelevant columns
data %>% filter(!(is.na(activity)))%>%select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
data%>%filter(!(is.na(activity)))%>%group_by(species)%>%summarise(m=mean(activity))
# Use flextable to render the summary table in a tidy format
data%>%filter(!(is.na(activity)))%>%group_by(species)%>%summarise(mean=mean(activity))
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data_n <- data %>% filter(!(is.na(activity)))
# Drop irrelevant columns
data_n %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard error=sd(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity),sum())
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity),sum(species))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity),sum(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity),sum=count())
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity),sum=count(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity),sum=number)
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species) %>% summarise(mean=mean(activity),standard_error=sd(activity))
treatment <- sum(data_n$treatment)
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species$treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),count(tratment))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),count())
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length())
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(activity))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
# Code to removing missing data from the `OA_activitydat_20190302_BIOL3207.csv` data frame.
data_n <- data %>% filter(!(is.na(activity)))
# Drop irrelevant columns
data_n %>% select("species","treatment","animal_id","activity")
# Check spelling in species and treatment but also generate a summary table
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
# Use flextable to render the summary table in a tidy format
data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(data_n)
# Use flextable to render the summary table in a tidy format
ft <- data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(ft)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data, mapping = aes(x = treatment, y = activity, colour= species)) + geom_boxplot()
help(ggsave)
# Use ggsave to save the figure
ggsave(output/figures/m_a)
# Use ggsave to save the figure
ggsave(./output/figures/m_a)
# Use ggsave to save the figure
ggsave(/output/figures/m_a)
# Use flextable to render the summary table in a tidy format
ft <- data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(ft,head(.))
# Use flextable to render the summary table in a tidy format
ft <- data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(ft)
ft <- set_caption(ft, caption = "555")
# Use flextable to render the summary table in a tidy format
ft <- set_caption(ft, caption = "555")
# Use flextable to render the summary table in a tidy format
ft <- data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(ft,caption = "New York Air Quality Measurements")
# Use flextable to render the summary table in a tidy format
ft <- data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(ft)
ft <- caption = ("New York Air Quality Measurements")
# Use flextable to render the summary table in a tidy format
ft <- data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(ft)
ft <- set_caption(ft, caption = "New York Air Quality Measurements")
# Use flextable to render the summary table in a tidy format
ft <- data_n %>% group_by(species,treatment) %>% summarise(mean=mean(activity),standard_error=sd(activity),number=length(treatment))
flextable(ft)
# Use ggsave to save the figure
ggsave(output/figures/m_a)
# Use ggsave to save the figure
ggsave("./output/figures/m_a")
help(ggsave)
# Use ggsave to save the figure
ggsave(
output/figures/,
# Use ggsave to save the figure
ggsave(
output/figures,
plot = last_plot(m_a))
# Use ggsave to save the figure
ggsave(./output/figures/m_a)
# Use ggsave to save the figure
ggsave('./output/figures/m_a')
# Use ggsave to save the figure
ggsave('./output/figures/m_a',width= 4, height= 6)
# Use ggsave to save the figure
ggsave('./output/figures/m_a.png',width= 4, height= 6)
# ggplot figure showing mean activity for each treatment (Control, OA) for each species.
ggplot(data_n, mapping = aes(x = treatment, y = activity, colour= species)) + geom_boxplot()
